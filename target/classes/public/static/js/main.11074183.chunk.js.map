{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","items","loadData","bind","this","setInterval","fetch","headers","then","response","json","data","i","length","setState","map","item","live","isGameActivated","team1Name","team1Score","team2Name","team2Score","console","log","class","key","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAyDeA,G,kBApDX,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,IAER,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALC,E,iFASjBC,KAAKF,WACLG,YAAYD,KAAKF,SAAU,Q,8GAI3BI,MAAM,OAAS,CACbC,QAAS,CACP,8BAA+B,OAGhCC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC/B,EAAKE,SAAS,CACZb,MAAOU,EAAKI,KAAI,SAAAC,GAAI,MAAK,CACvBC,KAAMD,EAAKE,gBACXC,UAAWH,EAAKG,UAChBC,WAAYJ,EAAKI,WACjBC,UAAWL,EAAKK,UAChBC,WAAYN,EAAKM,iBAGrBC,QAAQC,IAAIb,EAAKC,O,sEAMvB,OACE,yBAAKa,MAAM,6BAEP,+CACGrB,KAAKJ,MAAMC,MAAMc,KAAI,SAACC,EAAMJ,GAAP,OAClB,wBAAIc,IAAKd,GAAII,EAAKG,UAAlB,KAA+BH,EAAKI,WAApC,OAAoDJ,EAAKK,UAAzD,KAAsEL,EAAKM,WAA3E,SAA4F,0BAAMK,MAAQX,EAAKE,gBAAkB,QAAU,OAA/C,OAA2DF,EAAKE,gBAAhE,c,GA7C5FU,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.11074183.chunk.js","sourcesContent":["import React, { Component }  from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.css';\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        items:[]\n      }\n      this.loadData = this.loadData.bind(this)\n\n    }\n    componentDidMount() {\n      this.loadData()\n      setInterval(this.loadData, 15000);\n    }\n\n    async loadData() {\n      fetch('/nba',  {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      })\n        .then(response => {\n          return response.json();\n        })   \n        .then((data) => {\n          for (let i = 0; i < data.length; i++) {\n            this.setState({\n              items: data.map(item => ({\n                live: item.isGameActivated,\n                team1Name: item.team1Name,\n                team1Score: item.team1Score,\n                team2Name: item.team2Name,\n                team2Score: item.team2Score\n              }))\n            });\n            console.log(data[i])\n          }\n        });      \n    }\n    \n    render() {\n      return (\n        <div class=\"container container-table\">\n \n            <h1>Live NBA scores</h1>\n              {this.state.items.map((item, i) => (\n                  <ul key={i}>{item.team1Name} ({item.team1Score}) - {item.team2Name} ({item.team2Score})  -- <font color ={item.isGameActivated ? 'green' : 'red'}>Live{item.isGameActivated} </font></ul>\n              ))}\n\n       </div>\n      );\n    }\n  \n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}